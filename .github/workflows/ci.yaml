name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  # Overall tests and validation
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate version consistency
      run: make validate-version

  # Test matrix for different services
  test:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: java
            path: java/server
            setup: java
            test_cmd: mvn test
          - name: java-auth-server
            path: java-auth/server
            setup: java
            test_cmd: mvn test
          - name: java-auth-client
            path: java-auth/client
            setup: java
            test_cmd: mvn test
          - name: smart-replace-demo
            path: smart-replace-demo
            setup: node
            test_cmd: echo "No tests configured for smart-replace-demo"
          - name: node
            path: node
            setup: node
            test_cmd: echo "No tests configured for node"
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      if: matrix.service.setup == 'java'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      if: matrix.service.setup == 'java'
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js
      if: matrix.service.setup == 'node'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service.path }}/package-lock.json

    - name: Install Node dependencies
      if: matrix.service.setup == 'node'
      working-directory: ${{ matrix.service.path }}
      run: npm ci

    - name: Run tests
      working-directory: ${{ matrix.service.path }}
      run: ${{ matrix.service.test_cmd }}

    - name: Upload test results
      if: always() && matrix.service.setup == 'java'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service.name }}-test-results
        path: ${{ matrix.service.path }}/target/surefire-reports/
        retention-days: 7

  # Build matrix for different services
  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: java
            path: java
            build_cmd: make build
          - name: java-auth
            path: java-auth
            build_cmd: make build
          - name: node
            path: node
            build_cmd: make build
          - name: smart-replace-demo
            path: smart-replace-demo
            build_cmd: make build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      if: contains(matrix.service.name, 'java')
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      if: contains(matrix.service.name, 'java')
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js
      if: contains(matrix.service.name, 'node') || matrix.service.name == 'smart-replace-demo'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build service
      working-directory: ${{ matrix.service.path }}
      run: ${{ matrix.service.build_cmd }}

    - name: Upload Java artifacts
      if: contains(matrix.service.name, 'java')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service.name }}-artifacts
        path: |
          ${{ matrix.service.path }}/**/target/*.jar
        retention-days: 30

  # Docker build and push (only on master branch)
  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    strategy:
      fail-fast: false
      matrix:
        service: [java, node, java-auth, smart-replace-demo]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Get version
      id: version
      run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      working-directory: ${{ matrix.service }}
      run: make docker-multi VERSION=${{ steps.version.outputs.version }}