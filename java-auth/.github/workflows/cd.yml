name: CD - Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment:
      name: development
      url: https://dev.auth.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.DEV_KUBECONFIG }}" | base64 -d > ~/.kube/config

    - name: Set image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=develop-${GITHUB_SHA::8}" >> $GITHUB_ENV
        fi

    - name: Deploy to Kubernetes
      run: |
        cd k8s
        kustomize edit set image java-auth=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        kubectl apply -k .
        kubectl -n java-auth rollout status deployment/java-auth --timeout=5m

    - name: Verify deployment
      run: |
        kubectl -n java-auth get pods
        kubectl -n java-auth get services
        kubectl -n java-auth describe deployment java-auth

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.auth.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config

    - name: Set image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=master-${GITHUB_SHA::8}" >> $GITHUB_ENV
        fi

    - name: Deploy to Kubernetes
      run: |
        cd k8s
        kustomize edit set image java-auth=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        kubectl apply -k .
        kubectl -n java-auth rollout status deployment/java-auth --timeout=5m

    - name: Run smoke tests
      run: |
        INGRESS_HOST=$(kubectl -n java-auth get ingress java-auth-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Testing health endpoint at https://$INGRESS_HOST/health"
        curl -f -s -o /dev/null -w "%{http_code}" https://$INGRESS_HOST/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://auth.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > ~/.kube/config

    - name: Set image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        fi

    - name: Create backup
      run: |
        kubectl -n java-auth get deployment java-auth -o yaml > deployment-backup-$(date +%Y%m%d-%H%M%S).yaml
        kubectl -n java-auth get configmap -o yaml > configmap-backup-$(date +%Y%m%d-%H%M%S).yaml

    - name: Deploy to Kubernetes (Blue-Green)
      run: |
        cd k8s
        # Create new deployment with -green suffix
        kustomize edit set image java-auth=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        kustomize edit set namesuffix -- -green
        kubectl apply -k .
        kubectl -n java-auth rollout status deployment/java-auth-green --timeout=5m
        
        # Switch service to new deployment
        kubectl -n java-auth patch service java-auth -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and verify
        sleep 30
        
        # Delete old deployment
        kubectl -n java-auth delete deployment java-auth || true
        
        # Rename green deployment to primary
        kubectl -n java-auth patch deployment java-auth-green -p '{"metadata":{"name":"java-auth"}}'

    - name: Verify deployment
      run: |
        kubectl -n java-auth get pods
        kubectl -n java-auth get services
        INGRESS_HOST=$(kubectl -n java-auth get ingress java-auth-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f -s -o /dev/null -w "%{http_code}" https://$INGRESS_HOST/health || exit 1

    - name: Upload backup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-backup-${{ github.run_id }}
        path: |
          deployment-backup-*.yaml
          configmap-backup-*.yaml
        retention-days: 30

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure')
    needs: [deploy-production, deploy-staging]
    
    steps:
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
        fi

    - name: Rollback deployment
      run: |
        kubectl -n java-auth rollout undo deployment/java-auth
        kubectl -n java-auth rollout status deployment/java-auth --timeout=5m

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Deployment rollback executed",
            attachments: [{
              color: 'warning',
              text: 'Automatic rollback was triggered due to deployment failure'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}