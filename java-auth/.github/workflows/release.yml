name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: |
          {
            "template": "## What's Changed\n\n#{{CHANGELOG}}\n\n**Full Changelog**: #{{RELEASE_DIFF}}",
            "categories": [
              {
                "title": "## 🚀 Features",
                "labels": ["feature", "enhancement"]
              },
              {
                "title": "## 🐛 Bug Fixes",
                "labels": ["bug", "fix"]
              },
              {
                "title": "## 🧪 Tests",
                "labels": ["test", "testing"]
              },
              {
                "title": "## 📦 Dependencies",
                "labels": ["dependencies"]
              },
              {
                "title": "## 📚 Documentation",
                "labels": ["documentation", "docs"]
              }
            ]
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          # Release ${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## 🐳 Docker Image
          ```bash
          docker pull ${{ github.repository }}:${{ steps.version.outputs.version }}
          ```
          
          ## 📦 Installation
          
          ### Using Docker Compose
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/docker-compose.yml
          docker-compose up -d
          ```
          
          ### Using Kubernetes
          ```bash
          kubectl apply -f https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/k8s-manifests.yaml
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-rc') || contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build JAR
      run: |
        mvn clean package -DskipTests
        cp target/*.jar java-auth-${{ needs.create-release.outputs.version }}.jar

    - name: Create K8s manifests bundle
      run: |
        cd k8s
        kustomize build . > ../k8s-manifests.yaml
        cd ..
        tar -czf k8s-manifests-${{ needs.create-release.outputs.version }}.tar.gz k8s/

    - name: Create deployment bundle
      run: |
        mkdir -p release-bundle
        cp java-auth-${{ needs.create-release.outputs.version }}.jar release-bundle/
        cp docker-compose.yml release-bundle/
        cp -r k8s release-bundle/
        cp README.md release-bundle/
        tar -czf java-auth-${{ needs.create-release.outputs.version }}-bundle.tar.gz release-bundle/

    - name: Upload JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./java-auth-${{ needs.create-release.outputs.version }}.jar
        asset_name: java-auth-${{ needs.create-release.outputs.version }}.jar
        asset_content_type: application/java-archive

    - name: Upload K8s manifests
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./k8s-manifests.yaml
        asset_name: k8s-manifests.yaml
        asset_content_type: text/yaml

    - name: Upload K8s manifests bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./k8s-manifests-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: k8s-manifests-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload deployment bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./java-auth-${{ needs.create-release.outputs.version }}-bundle.tar.gz
        asset_name: java-auth-${{ needs.create-release.outputs.version }}-bundle.tar.gz
        asset_content_type: application/gzip

    - name: Upload docker-compose.yml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./docker-compose.yml
        asset_name: docker-compose.yml
        asset_content_type: text/yaml

  update-version:
    name: Update Version in Repository
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update pom.xml version
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        VERSION_WITHOUT_V=${VERSION#v}
        mvn versions:set -DnewVersion=$VERSION_WITHOUT_V -DgenerateBackupPoms=false

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: bump version to ${{ needs.create-release.outputs.version }}"
        title: "chore: bump version to ${{ needs.create-release.outputs.version }}"
        body: |
          Automatic version bump after release ${{ needs.create-release.outputs.version }}
          
          This PR updates the version in pom.xml to prepare for the next development cycle.
        branch: version-bump-${{ needs.create-release.outputs.version }}
        delete-branch: true