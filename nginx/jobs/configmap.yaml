apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-script
  namespace: demo
data:
  generate-traffic.sh: |
    #!/bin/sh
    set -e

    # Colors (if terminal supports it)
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    MAGENTA='\033[0;35m'
    CYAN='\033[0;36m'
    NC='\033[0m' # No Color

    echo "════════════════════════════════════════════════════════"
    echo "  NGINX DEMO - Simulated User Traffic Generator"
    echo "════════════════════════════════════════════════════════"
    echo ""

    REQUESTS=0
    SUCCESS=0
    FAILED=0

    # Make a request with user simulation
    req() {
      local endpoint=$1
      local user=$2
      local action=$3
      REQUESTS=$((REQUESTS + 1))

      printf "${CYAN}[User: %-15s]${NC} ${action}... " "$user"
      if curl -s -f -m 5 -H 'Accept: */*' "http://gateway$endpoint" > /dev/null 2>&1; then
        echo "${GREEN}✓${NC}"
        SUCCESS=$((SUCCESS + 1))
      else
        echo "${RED}✗${NC}"
        FAILED=$((FAILED + 1))
      fi
      sleep $(awk "BEGIN {print $RANDOM % 3 / 10 + 0.1}")
    }

    # Simulate a user session
    user_session() {
      local user=$1
      local user_id=$((RANDOM % 30000))

      echo ""
      echo "${MAGENTA}▶ $user started session${NC}"

      # Login
      req "/login" "$user" "Logging in"
      sleep 0.2

      # Browse user profile
      req "/user/profile/$user_id" "$user" "Viewing profile"

      # Random actions based on user type
      case $((RANDOM % 4)) in
        0) # Space enthusiast
          req "/spacex/launches/latest" "$user" "Checking latest launch"
          req "/spacex/rockets" "$user" "Browsing rockets"
          ;;
        1) # Shopper
          req "/payment/lookup/$((RANDOM % 30000))" "$user" "Checking payment"
          req "/user/" "$user" "Updating account"
          ;;
        2) # Browser
          req "/user/" "$user" "Browsing catalog"
          req "/spacex/company" "$user" "Reading about SpaceX"
          ;;
        3) # Power user
          req "/payment/" "$user" "Checking payment status"
          req "/payment/lookup/$((RANDOM % 30000))" "$user" "Verifying transaction"
          req "/spacex/launches" "$user" "Viewing launch history"
          ;;
      esac

      echo "${MAGENTA}▶ $user ended session${NC}"
    }

    # Fun user names
    USERS="Alice Bob Charlie Diana Eve Frank Grace Henry Ivy Jack"

    # Simulate concurrent-ish traffic
    echo "${YELLOW}Starting simulation with 10 users...${NC}"
    echo ""

    # Initial API providers check (once per job to avoid rate limiting)
    req "/payment/providers" "System" "Fetching payment providers"
    sleep 0.3

    # Burst of initial logins
    for user in $USERS; do
      req "/login" "$user" "Initial login"
      sleep 0.05
    done

    echo ""
    echo "${YELLOW}Users exploring the platform...${NC}"

    # User sessions (sequential but with varied timing)
    for user in $USERS; do
      user_session "$user"
      sleep 0.1
    done

    # Some background activity
    echo ""
    echo "${YELLOW}Background API calls...${NC}"
    echo ""

    for i in $(seq 1 5); do
      req "/spacex/launches/latest" "Background-Job" "Fetching launch data"
      req "/payment/" "API-Monitor" "Health check"
    done

    # Final payment providers refresh
    req "/payment/providers" "System" "Refreshing payment providers"

    # Final stats
    echo ""
    echo "════════════════════════════════════════════════════════"
    echo "  Traffic Generation Complete!"
    echo "════════════════════════════════════════════════════════"
    echo "  Total Requests:    $REQUESTS"
    echo "  ${GREEN}Successful:        $SUCCESS${NC}"
    echo "  ${RED}Failed:            $FAILED${NC}"
    echo "  Success Rate:      $((SUCCESS * 100 / REQUESTS))%"
    echo "════════════════════════════════════════════════════════"
