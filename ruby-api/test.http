### Variables
@port = 3000
@host = localhost
@token =

### Health Check (No Auth Required)
GET http://{{host}}:{{port}}/health
Content-Type: application/json

###

### Login - Get JWT Token
# @name login
POST http://{{host}}:{{port}}/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "demo123"
}

###

### Login - Invalid Credentials
POST http://{{host}}:{{port}}/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "wrongpassword"
}

###

### Get all tasks (Requires Auth - paste token from login response)
GET http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: Bearer {{token}}

###

### Get single task by ID (Requires Auth)
GET http://{{host}}:{{port}}/tasks?id=1
Content-Type: application/json
Authorization: Bearer {{token}}

###

### Create a new task (Requires Auth)
POST http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Deploy Ruby API to production",
  "description": "Deploy the new Ruby microservice to the production Kubernetes cluster",
  "status": "pending",
  "priority": 1
}

###

### Create another task (Requires Auth)
POST http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Write API documentation",
  "description": "Create comprehensive API documentation using Swagger/OpenAPI",
  "status": "in_progress",
  "priority": 2
}

###

### Update task with ID 1 (Requires Auth)
PUT http://{{host}}:{{port}}/tasks?id=1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Setup development environment - UPDATED",
  "description": "Install Ruby 3.2, PostgreSQL 15, and all required dependencies",
  "status": "completed",
  "priority": 1
}

###

### Update task with ID 2 (Requires Auth)
PUT http://{{host}}:{{port}}/tasks?id=2
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Create API endpoints",
  "description": "Implement CRUD operations for tasks - COMPLETED",
  "status": "completed",
  "priority": 2
}

###

### Delete task with ID 5 (Requires Auth)
DELETE http://{{host}}:{{port}}/tasks?id=5
Content-Type: application/json
Authorization: Bearer {{token}}

###

### Delete task with ID 4 (Requires Auth)
DELETE http://{{host}}:{{port}}/tasks?id=4
Content-Type: application/json
Authorization: Bearer {{token}}

###

### Time conversion - Convert epoch timestamp to America/New_York timezone (Requires Auth)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1704067200,
  "timezone": "America/New_York"
}

###

### Time conversion - Convert epoch timestamp to Europe/London timezone (Requires Auth)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1609459200,
  "timezone": "Europe/London"
}

###

### Time conversion - Convert epoch timestamp to Asia/Tokyo timezone (Requires Auth)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1672531200,
  "timezone": "Asia/Tokyo"
}

###

### Time conversion - Convert current timestamp (default timezone) (Requires Auth)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1735689600
}

###

### Error Test: Try to get a non-existent task (should return 404)
GET http://{{host}}:{{port}}/tasks?id=999
Content-Type: application/json
Authorization: Bearer {{token}}

###

### Error Test: Try to update a non-existent task (should return 404)
PUT http://{{host}}:{{port}}/tasks?id=999
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Non-existent task",
  "description": "This task does not exist",
  "status": "pending",
  "priority": 1
}

###

### Error Test: Try to delete a non-existent task (should return 404)
DELETE http://{{host}}:{{port}}/tasks?id=999
Content-Type: application/json
Authorization: Bearer {{token}}

###

### Error Test: Create task with invalid JSON (should return 400)
POST http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Invalid task"
  "description": "Missing comma in JSON"
}

###

### Error Test: Time conversion without epoch (should return 400)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "timezone": "America/New_York"
}

###

### Error Test: Time conversion with invalid JSON (should return 400)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1704067200
  "timezone": "America/New_York"
}

###

### Rate Limit Test: Rapid time conversions (should hit rate limit after first request)
POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1704067200,
  "timezone": "America/New_York"
}

###

POST http://{{host}}:{{port}}/api/time-convert
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "epoch": 1704067200,
  "timezone": "America/New_York"
}

###

### Auth Error Test: Call without token (should return 401)
GET http://{{host}}:{{port}}/tasks
Content-Type: application/json

###

### Auth Error Test: Call with invalid token (should return 401)
GET http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: Bearer invalid-token-here

###

### Auth Error Test: Call with malformed Bearer header (should return 401)
GET http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: InvalidFormat token-here

###

### Get all tasks again to see final state (With Auth)
GET http://{{host}}:{{port}}/tasks
Content-Type: application/json
Authorization: Bearer {{token}}

###
